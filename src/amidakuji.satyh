% .satyh files are loaded by the PDF backend.
% .satyh-markdown and .saty-html files are loaded by the text backend for markdoown and html outputs, respectively.
% A .satyg file is loaded when the corresponding .satyh or .satyh-* files are not loaded.
% See https://qiita.com/puripuri2100/items/ca0b054d38480f1bda61 for more details about the load order.
@stage: 1
@require: color
@require: gr
@import: amidakuji0


module AmidakujiConst = struct
  let width-unit = 1cm
  let height-unit = 0.75cm
  let color = Color.black
  let thickness = 2pt

  let line =
    stroke thickness color

  let make-x (xorig, yorig) i =
    xorig +' width-unit *' (float i)

  let make-y height (xorig, yorig) j =
    yorig +' height -' height-unit *' (float j)

  let draw-frame (x, y) w h =
    stroke 1pt Color.red (Gr.rectangle (x, y) (x +' w, y +' h))

  let int-range =
    let-rec aux acc m n =
      if m > n then List.reverse acc else
        aux (m :: acc) (m + 1) n
    in
    aux []

  let-inline ctx \embed ib =
    ib
end


let-inline \amidakuji@ ~poss =
  ~(let (ipos, s) = poss in
    let (drawns-0, inum-0, jnum-0) = Amidakuji0.parse s in
    let () = display-message `DEBUG` in
    let () = drawns-0 |> List.iter Amidakuji0.display-drawn in  % for debug
    &(let inum = ~(lift-int inum-0) in
      let jnum = ~(lift-int jnum-0) in
      let drawns = ~(lift-list lift-amida-drawn drawns-0) in
      let width = AmidakujiConst.width-unit *' (float inum) in
      let height = AmidakujiConst.height-unit *' (float jnum) in
      let ib =
        inline-graphics width height 0pt (fun origin -> (
          let grs-main =
            drawns |> List.map (fun drawn -> (
              match drawn with
              | HorizontalLine(i, j) ->
                  let x = AmidakujiConst.make-x origin i in
                  let y = AmidakujiConst.make-y height origin j in
                  let ym = y -' AmidakujiConst.height-unit *' 0.5 in
                  let () = display-message `HorizontalLine` in
                  [
                    AmidakujiConst.line
                      (Gr.line
                        (x, ym)
                        (x +' AmidakujiConst.width-unit, ym));
                  ]

              | CrossingLines(i, j)  ->
                  let xL = AmidakujiConst.make-x origin i in
                  let xR = xL +' AmidakujiConst.width-unit in
                  let y = AmidakujiConst.make-y height origin j in
                  let yH = y -' AmidakujiConst.height-unit *' 0.15 in
                  let yL = y -' AmidakujiConst.height-unit *' 0.85 in
                  let () = display-message `CrossingLines` in
                  [
                    AmidakujiConst.line (Gr.line (xL, yH) (xR, yL));
                    AmidakujiConst.line (Gr.line (xL, yL) (xR, yH));
                  ]

              | PositiveLine(i, j) ->
                  let xL = AmidakujiConst.make-x origin i in
                  let xR = xL +' AmidakujiConst.width-unit in
                  let y = AmidakujiConst.make-y height origin j in
                  let yH = y -' AmidakujiConst.height-unit *' 0.1 in
                  let yL = y -' AmidakujiConst.height-unit *' 0.9 in
                  [
                    AmidakujiConst.line (Gr.line (xL, yL) (xR, yH));
                  ]

              | NegativeLine(i, j) ->
                  let xL = AmidakujiConst.make-x origin i in
                  let xR = xL +' AmidakujiConst.width-unit in
                  let y = AmidakujiConst.make-y height origin j in
                  let yH = y -' AmidakujiConst.height-unit *' 0.1 in
                  let yL = y -' AmidakujiConst.height-unit *' 0.9 in
                  [
                    AmidakujiConst.line (Gr.line (xL, yH) (xR, yL));
                  ]

              | DoubleLine(i, j) ->
                  let xL = AmidakujiConst.make-x origin i in
                  let xR = xL +' AmidakujiConst.width-unit in
                  let y = AmidakujiConst.make-y height origin j in
                  let yH = y -' AmidakujiConst.height-unit *' 0.35 in
                  let yL = y -' AmidakujiConst.height-unit *' 0.65 in
                  [
                    AmidakujiConst.line (Gr.line (xL, yH) (xR, yH));
                    AmidakujiConst.line (Gr.line (xL, yL) (xR, yL));
                  ]

            )) |> List.concat
          in
          let grs-vert =
            let yT = AmidakujiConst.make-y height origin 0 in
            let yL = AmidakujiConst.make-y height origin jnum in
            (AmidakujiConst.int-range 0 inum) |> List.map (fun i -> (
              let x = AmidakujiConst.make-x origin i in
              AmidakujiConst.line (Gr.line (x, yT) (x, yL))
            ))
          in
          List.append grs-vert grs-main
        ))
      in
      {\AmidakujiConst.embed(ib);}
    )
  )
